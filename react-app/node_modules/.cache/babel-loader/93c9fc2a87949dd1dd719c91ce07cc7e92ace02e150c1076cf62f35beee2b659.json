{"ast":null,"code":"var _jsxFileName = \"/user/HS400/sa03742/MyWeatherReport/react-app/src/components/AddCityForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddCityForm = ({\n  cities,\n  onCityAdded,\n  showNotification\n}) => {\n  _s();\n  const [cityName, setCityName] = useState('');\n\n  // Helper: Get CSRF token from cookies.\n  const getCSRFToken = () => {\n    const match = document.cookie.match(new RegExp('(^| )csrftoken=([^;]+)'));\n    return match ? match[2] : '';\n  };\n\n  // Validate city using Visual Crossing API.\n  // Consider the city valid if any of these exist:\n  //  - resolvedAddress\n  //  - days property (even if empty)\n  //  - currentConditions exists and is non-empty\n  const validateCity = name => {\n    const apikey = 'BP8GPRYV53UQ56SHJR5EFCJ77';\n    const apiUrl = `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${encodeURIComponent(name)}?unitGroup=metric&key=${apikey}&contentType=json`;\n    return fetch(apiUrl).then(response => {\n      if (!response.ok) throw new Error(\"Invalid city\");\n      return response.json();\n    }).then(data => {\n      console.log(\"Validation data for\", name, data);\n      if (data.resolvedAddress) {\n        return true;\n      }\n      if (data.days && Array.isArray(data.days)) {\n        return true;\n      }\n      if (data.currentConditions && Object.keys(data.currentConditions).length > 0) {\n        return true;\n      }\n      throw new Error(\"Invalid city\");\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const trimmedName = cityName.trim();\n    if (!trimmedName) return;\n\n    // Duplicate check.\n    if (cities.some(city => city.name.toLowerCase() === trimmedName.toLowerCase())) {\n      showNotification({\n        type: 'danger',\n        message: `City '${trimmedName}' already exists in the list!`\n      });\n      return;\n    }\n\n    // Validate the city.\n    validateCity(trimmedName).then(() => {\n      return fetch('/ajax/cities/add/', {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': getCSRFToken()\n        },\n        body: JSON.stringify({\n          name: trimmedName\n        })\n      });\n    }).then(res => res.json()).then(data => {\n      if (data.status === 'success') {\n        showNotification({\n          type: 'success',\n          message: \"City added successfully!\"\n        });\n        onCityAdded(data.city);\n        setCityName('');\n      } else {\n        showNotification({\n          type: 'danger',\n          message: `City '${trimmedName}' already exists in the list!`\n        });\n      }\n    }).catch(err => {\n      console.error('Validation or network error:', err);\n      showNotification({\n        type: 'danger',\n        message: `City '${trimmedName}' does not exist in the world!`\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"addCityForm\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field has-addons\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control is-expanded\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            name: \"name\",\n            type: \"text\",\n            placeholder: \"City Name\",\n            required: true,\n            value: cityName,\n            onChange: e => setCityName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button is-info\",\n            type: \"submit\",\n            children: \"Add City\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(AddCityForm, \"12wOx+cMTdbb2TTJ56KLWccy2IA=\");\n_c = AddCityForm;\nexport default AddCityForm;\nvar _c;\n$RefreshReg$(_c, \"AddCityForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AddCityForm","cities","onCityAdded","showNotification","_s","cityName","setCityName","getCSRFToken","match","document","cookie","RegExp","validateCity","name","apikey","apiUrl","encodeURIComponent","fetch","then","response","ok","Error","json","data","console","log","resolvedAddress","days","Array","isArray","currentConditions","Object","keys","length","handleSubmit","e","preventDefault","trimmedName","trim","some","city","toLowerCase","type","message","method","credentials","headers","body","JSON","stringify","res","status","catch","err","error","children","id","onSubmit","className","placeholder","required","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/user/HS400/sa03742/MyWeatherReport/react-app/src/components/AddCityForm.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst AddCityForm = ({ cities, onCityAdded, showNotification }) => {\n  const [cityName, setCityName] = useState('');\n\n  // Helper: Get CSRF token from cookies.\n  const getCSRFToken = () => {\n    const match = document.cookie.match(new RegExp('(^| )csrftoken=([^;]+)'));\n    return match ? match[2] : '';\n  };\n\n  // Validate city using Visual Crossing API.\n  // Consider the city valid if any of these exist:\n  //  - resolvedAddress\n  //  - days property (even if empty)\n  //  - currentConditions exists and is non-empty\n  const validateCity = (name) => {\n    const apikey = 'BP8GPRYV53UQ56SHJR5EFCJ77';\n    const apiUrl = `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${encodeURIComponent(name)}?unitGroup=metric&key=${apikey}&contentType=json`;\n    return fetch(apiUrl)\n      .then(response => {\n        if (!response.ok) throw new Error(\"Invalid city\");\n        return response.json();\n      })\n      .then(data => {\n        console.log(\"Validation data for\", name, data);\n        if (data.resolvedAddress) {\n          return true;\n        }\n        if (data.days && Array.isArray(data.days)) {\n          return true;\n        }\n        if (data.currentConditions && Object.keys(data.currentConditions).length > 0) {\n          return true;\n        }\n        throw new Error(\"Invalid city\");\n      });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const trimmedName = cityName.trim();\n    if (!trimmedName) return;\n\n    // Duplicate check.\n    if (cities.some(city => city.name.toLowerCase() === trimmedName.toLowerCase())) {\n      showNotification({ type: 'danger', message: `City '${trimmedName}' already exists in the list!` });\n      return;\n    }\n\n    // Validate the city.\n    validateCity(trimmedName)\n      .then(() => {\n        return fetch('/ajax/cities/add/', {\n          method: 'POST',\n          credentials: 'include',\n          headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': getCSRFToken()\n          },\n          body: JSON.stringify({ name: trimmedName })\n        });\n      })\n      .then(res => res.json())\n      .then(data => {\n        if (data.status === 'success') {\n          showNotification({ type: 'success', message: \"City added successfully!\" });\n          onCityAdded(data.city);\n          setCityName('');\n        } else {\n          showNotification({ type: 'danger', message: `City '${trimmedName}' already exists in the list!` });\n        }\n      })\n      .catch(err => {\n        console.error('Validation or network error:', err);\n        showNotification({ type: 'danger', message: `City '${trimmedName}' does not exist in the world!` });\n      });\n  };\n\n  return (\n    <div>\n      <form id=\"addCityForm\" onSubmit={handleSubmit}>\n        <div className=\"field has-addons\">\n          <div className=\"control is-expanded\">\n            <input\n              className=\"input\"\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"City Name\"\n              required\n              value={cityName}\n              onChange={e => setCityName(e.target.value)}\n            />\n          </div>\n          <div className=\"control\">\n            <button className=\"button is-info\" type=\"submit\">Add City</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default AddCityForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}