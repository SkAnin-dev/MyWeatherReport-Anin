{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import Header from'./components/Header';import Hero from'./components/Hero';import Marquee from'./components/Marquee';import AddCityForm from'./components/AddCityForm';import CityList from'./components/CityList';import Footer from'./components/Footer';import Notification from'./components/Notification';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// Default cities that must always be present on refresh.\nconst defaultCities=[{id:'tokyo',name:'Tokyo'},{id:'london',name:'London'},{id:'newyork',name:'New York'}];// Initialize cities from localStorage. If stored list is empty, add default cities.\nconst[cities,setCities]=useState(()=>{const stored=localStorage.getItem('cities');let initialCities=stored?JSON.parse(stored):[];defaultCities.forEach(defaultCity=>{if(!initialCities.some(city=>city.id.toLowerCase()===defaultCity.id)){initialCities.push(defaultCity);}});return initialCities;});// Persist changes.\nuseEffect(()=>{localStorage.setItem('cities',JSON.stringify(cities));},[cities]);// Global notification state.\nconst[notification,setNotification]=useState(null);// Ref for the add form container.\nconst formRef=useRef(null);// Global function to show notification and scroll to top.\nconst showNotification=notif=>{setNotification(notif);// Scroll all the way to the top of the page.\nwindow.scrollTo({top:0,behavior:'smooth'});};const addCity=newCity=>{setCities(prev=>[...prev,newCity]);};// Remove city from state.\nconst removeCity=cityId=>{setCities(prev=>prev.filter(city=>city.id!==cityId));};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(Hero,{}),/*#__PURE__*/_jsx(Marquee,{}),/*#__PURE__*/_jsx(\"section\",{className:\"section\",style:{background:\"url('/media/metofficegovuk_heroXLarge.jpeg') no-repeat center center\",backgroundSize:'cover'},children:/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"columns\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"column is-offset-4 is-4\",ref:formRef,children:[/*#__PURE__*/_jsx(AddCityForm,{cities:cities,onCityAdded:addCity,showNotification:showNotification}),notification&&/*#__PURE__*/_jsx(Notification,{type:notification.type,message:notification.message,onClose:()=>setNotification(null)})]})})})}),/*#__PURE__*/_jsx(\"section\",{className:\"section\",children:/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"columns\",children:/*#__PURE__*/_jsx(CityList,{cities:cities,onCityDeleted:removeCity,showNotification:showNotification})})})}),/*#__PURE__*/_jsx(\"hr\",{style:{borderTop:\"2px solid #000\",marginBottom:0}}),/*#__PURE__*/_jsx(Footer,{})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","Header","Hero","Marquee","AddCityForm","CityList","Footer","Notification","jsx","_jsx","jsxs","_jsxs","App","defaultCities","id","name","cities","setCities","stored","localStorage","getItem","initialCities","JSON","parse","forEach","defaultCity","some","city","toLowerCase","push","setItem","stringify","notification","setNotification","formRef","showNotification","notif","window","scrollTo","top","behavior","addCity","newCity","prev","removeCity","cityId","filter","children","className","style","background","backgroundSize","ref","onCityAdded","type","message","onClose","onCityDeleted","borderTop","marginBottom"],"sources":["/user/HS400/sa03742/MyWeatherReport/react-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Header from './components/Header';\nimport Hero from './components/Hero';\nimport Marquee from './components/Marquee';\nimport AddCityForm from './components/AddCityForm';\nimport CityList from './components/CityList';\nimport Footer from './components/Footer';\nimport Notification from './components/Notification';\n\nfunction App() {\n  // Default cities that must always be present on refresh.\n  const defaultCities = [\n    { id: 'tokyo', name: 'Tokyo' },\n    { id: 'london', name: 'London' },\n    { id: 'newyork', name: 'New York' }\n  ];\n\n  // Initialize cities from localStorage. If stored list is empty, add default cities.\n  const [cities, setCities] = useState(() => {\n    const stored = localStorage.getItem('cities');\n    let initialCities = stored ? JSON.parse(stored) : [];\n    defaultCities.forEach(defaultCity => {\n      if (!initialCities.some(city => city.id.toLowerCase() === defaultCity.id)) {\n        initialCities.push(defaultCity);\n      }\n    });\n    return initialCities;\n  });\n\n  // Persist changes.\n  useEffect(() => {\n    localStorage.setItem('cities', JSON.stringify(cities));\n  }, [cities]);\n\n  // Global notification state.\n  const [notification, setNotification] = useState(null);\n  // Ref for the add form container.\n  const formRef = useRef(null);\n\n  // Global function to show notification and scroll to top.\n  const showNotification = (notif) => {\n    setNotification(notif);\n    // Scroll all the way to the top of the page.\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const addCity = (newCity) => {\n    setCities(prev => [...prev, newCity]);\n  };\n\n  // Remove city from state.\n  const removeCity = (cityId) => {\n    setCities(prev => prev.filter(city => city.id !== cityId));\n  };\n\n  return (\n    <div>\n      <Header />\n      <Hero />\n      <Marquee />\n      {/* Add City Form Section with background image and proper column formatting */}\n      <section\n        className=\"section\"\n        style={{\n          background: \"url('/media/metofficegovuk_heroXLarge.jpeg') no-repeat center center\",\n          backgroundSize: 'cover'\n        }}\n      >\n        <div className=\"container\">\n          <div className=\"columns\">\n            <div className=\"column is-offset-4 is-4\" ref={formRef}>\n              <AddCityForm\n                cities={cities}\n                onCityAdded={addCity}\n                showNotification={showNotification}\n              />\n              {/* Notification rendered directly under the add form */}\n              {notification && (\n                <Notification\n                  type={notification.type}\n                  message={notification.message}\n                  onClose={() => setNotification(null)}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n      {/* City List Section */}\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"columns\">\n            <CityList\n              cities={cities}\n              onCityDeleted={removeCity}\n              showNotification={showNotification}\n            />\n          </div>\n        </div>\n      </section>\n      <hr style={{ borderTop: \"2px solid #000\", marginBottom: 0 }} />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}