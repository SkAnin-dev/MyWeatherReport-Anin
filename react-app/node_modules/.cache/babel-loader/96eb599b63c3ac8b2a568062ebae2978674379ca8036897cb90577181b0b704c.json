{"ast":null,"code":"var _jsxFileName = \"/user/HS400/sa03742/MyWeatherReport/react-app/src/components/AddCityForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { AJAX } from '../constant';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddCityForm = ({\n  cities,\n  onCityAdded,\n  showNotification\n}) => {\n  _s();\n  const [cityName, setCityName] = useState('');\n\n  // Helper: Get CSRF token from cookies.\n  const getCSRFToken = () => {\n    const match = document.cookie.match(new RegExp('(^| )csrftoken=([^;]+)'));\n    return match ? match[2] : '';\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const trimmedName = cityName.trim();\n    if (!trimmedName) return;\n\n    // Duplicate check.\n    if (cities.some(city => city.name.toLowerCase() === trimmedName.toLowerCase())) {\n      showNotification({\n        type: 'danger',\n        message: `City '${trimmedName}' already exists in the list!`\n      });\n      return;\n    }\n\n    // Create FormData from the form element.\n    const formData = new FormData(e.target);\n    fetch(`${AJAX}cities/add/`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'X-CSRFToken': getCSRFToken()\n      },\n      body: formData\n    }).then(res => res.json()).then(data => {\n      if (data.status === 'success') {\n        showNotification({\n          type: 'success',\n          message: \"City added successfully!\"\n        });\n        onCityAdded(data.city);\n        setCityName('');\n      } else {\n        showNotification({\n          type: 'danger',\n          message: `City '${trimmedName}' already exists in the list!`\n        });\n      }\n    }).catch(err => {\n      console.error('Validation or network error:', err);\n      showNotification({\n        type: 'danger',\n        message: `City '${trimmedName}' does not exist in the world!`\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"addCityForm\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field has-addons\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control is-expanded\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            name: \"name\",\n            type: \"text\",\n            placeholder: \"City Name\",\n            required: true,\n            value: cityName,\n            onChange: e => setCityName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button is-info\",\n            type: \"submit\",\n            children: \"Add City\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(AddCityForm, \"12wOx+cMTdbb2TTJ56KLWccy2IA=\");\n_c = AddCityForm;\nexport default AddCityForm;\nvar _c;\n$RefreshReg$(_c, \"AddCityForm\");","map":{"version":3,"names":["React","useState","AJAX","jsxDEV","_jsxDEV","AddCityForm","cities","onCityAdded","showNotification","_s","cityName","setCityName","getCSRFToken","match","document","cookie","RegExp","handleSubmit","e","preventDefault","trimmedName","trim","some","city","name","toLowerCase","type","message","formData","FormData","target","fetch","method","credentials","headers","body","then","res","json","data","status","catch","err","console","error","children","id","onSubmit","className","placeholder","required","value","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/user/HS400/sa03742/MyWeatherReport/react-app/src/components/AddCityForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { AJAX } from '../constant';\n\nconst AddCityForm = ({ cities, onCityAdded, showNotification }) => {\n  const [cityName, setCityName] = useState('');\n\n  // Helper: Get CSRF token from cookies.\n  const getCSRFToken = () => {\n    const match = document.cookie.match(new RegExp('(^| )csrftoken=([^;]+)'));\n    return match ? match[2] : '';\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const trimmedName = cityName.trim();\n    if (!trimmedName) return;\n\n    // Duplicate check.\n    if (cities.some(city => city.name.toLowerCase() === trimmedName.toLowerCase())) {\n      showNotification({ type: 'danger', message: `City '${trimmedName}' already exists in the list!` });\n      return;\n    }\n\n    // Create FormData from the form element.\n    const formData = new FormData(e.target);\n\n    fetch(`${AJAX}cities/add/`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'X-CSRFToken': getCSRFToken()\n      },\n      body: formData\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.status === 'success') {\n          showNotification({ type: 'success', message: \"City added successfully!\" });\n          onCityAdded(data.city);\n          setCityName('');\n        } else {\n          showNotification({ type: 'danger', message: `City '${trimmedName}' already exists in the list!` });\n        }\n      })\n      .catch(err => {\n        console.error('Validation or network error:', err);\n        showNotification({ type: 'danger', message: `City '${trimmedName}' does not exist in the world!` });\n      });\n  };\n\n  return (\n    <div>\n      <form id=\"addCityForm\" onSubmit={handleSubmit}>\n        <div className=\"field has-addons\">\n          <div className=\"control is-expanded\">\n            <input\n              className=\"input\"\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"City Name\"\n              required\n              value={cityName}\n              onChange={e => setCityName(e.target.value)}\n            />\n          </div>\n          <div className=\"control\">\n            <button className=\"button is-info\" type=\"submit\">Add City</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default AddCityForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}