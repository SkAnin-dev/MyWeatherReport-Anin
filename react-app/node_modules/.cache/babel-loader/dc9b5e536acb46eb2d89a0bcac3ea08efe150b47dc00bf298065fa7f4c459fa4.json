{"ast":null,"code":"import React,{useState}from'react';import{AJAX,PROXY}from'../constant';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AddCityForm=_ref=>{let{cities,onCityAdded,showNotification}=_ref;const[cityName,setCityName]=useState('');// Retrieve CSRF token from cookies.\nconst getCSRFToken=()=>{const match=document.cookie.match(new RegExp('(^| )csrftoken=([^;]+)'));return match?match[2]:'';};// Validate city by using the Django proxy endpoint.\nconst validateCity=name=>{const url=`${PROXY}weather/${encodeURIComponent(name)}/`;return fetch(url).then(response=>{if(!response.ok){throw new Error(\"City not found\");}return response.json();}).then(data=>{// Check if response contains current conditions or day data.\nif(data.currentConditions||data.days&&data.days.length>0){return true;}throw new Error(\"City not found\");});};const handleSubmit=e=>{e.preventDefault();const trimmedName=cityName.trim();if(!trimmedName)return;// Check for duplicate city.\nif(cities.some(city=>city.name.toLowerCase()===trimmedName.toLowerCase())){showNotification({type:'danger',message:`City '${trimmedName}' already exists in the list!`});return;}// First, validate the city via the proxy.\nvalidateCity(trimmedName).then(()=>{// City is valid. Create FormData and send the POST request.\nconst formData=new FormData(e.target);fetch(`${AJAX}cities/add/`,{method:'POST',credentials:'include',headers:{'X-CSRFToken':getCSRFToken()},body:formData}).then(res=>res.json()).then(data=>{if(data.status==='success'){showNotification({type:'success',message:\"City added successfully!\"});onCityAdded(data.city);setCityName('');}else{showNotification({type:'danger',message:`City '${trimmedName}' already exists in the list!`});}}).catch(err=>{console.error('Error adding city:',err);showNotification({type:'danger',message:`Error adding city '${trimmedName}'`});});}).catch(err=>{console.error(\"City validation failed:\",err);showNotification({type:'danger',message:`City '${trimmedName}' does not exist in the world!`});});};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"form\",{id:\"addCityForm\",onSubmit:handleSubmit,children:/*#__PURE__*/_jsxs(\"div\",{className:\"field has-addons\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"control is-expanded\",children:/*#__PURE__*/_jsx(\"input\",{className:\"input\",name:\"name\",type:\"text\",placeholder:\"City Name\",required:true,value:cityName,onChange:e=>setCityName(e.target.value)})}),/*#__PURE__*/_jsx(\"div\",{className:\"control\",children:/*#__PURE__*/_jsx(\"button\",{className:\"button is-info\",type:\"submit\",children:\"Add City\"})})]})})});};export default AddCityForm;","map":{"version":3,"names":["React","useState","AJAX","PROXY","jsx","_jsx","jsxs","_jsxs","AddCityForm","_ref","cities","onCityAdded","showNotification","cityName","setCityName","getCSRFToken","match","document","cookie","RegExp","validateCity","name","url","encodeURIComponent","fetch","then","response","ok","Error","json","data","currentConditions","days","length","handleSubmit","e","preventDefault","trimmedName","trim","some","city","toLowerCase","type","message","formData","FormData","target","method","credentials","headers","body","res","status","catch","err","console","error","children","id","onSubmit","className","placeholder","required","value","onChange"],"sources":["/user/HS400/sa03742/MyWeatherReport/react-app/src/components/AddCityForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { AJAX, PROXY } from '../constant';\n\nconst AddCityForm = ({ cities, onCityAdded, showNotification }) => {\n  const [cityName, setCityName] = useState('');\n\n  // Retrieve CSRF token from cookies.\n  const getCSRFToken = () => {\n    const match = document.cookie.match(new RegExp('(^| )csrftoken=([^;]+)'));\n    return match ? match[2] : '';\n  };\n\n  // Validate city by using the Django proxy endpoint.\n  const validateCity = (name) => {\n    const url = `${PROXY}weather/${encodeURIComponent(name)}/`;\n    return fetch(url)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(\"City not found\");\n        }\n        return response.json();\n      })\n      .then(data => {\n        // Check if response contains current conditions or day data.\n        if (data.currentConditions || (data.days && data.days.length > 0)) {\n          return true;\n        }\n        throw new Error(\"City not found\");\n      });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const trimmedName = cityName.trim();\n    if (!trimmedName) return;\n\n    // Check for duplicate city.\n    if (cities.some(city => city.name.toLowerCase() === trimmedName.toLowerCase())) {\n      showNotification({\n        type: 'danger',\n        message: `City '${trimmedName}' already exists in the list!`\n      });\n      return;\n    }\n\n    // First, validate the city via the proxy.\n    validateCity(trimmedName)\n      .then(() => {\n        // City is valid. Create FormData and send the POST request.\n        const formData = new FormData(e.target);\n        fetch(`${AJAX}cities/add/`, {\n          method: 'POST',\n          credentials: 'include',\n          headers: {\n            'X-CSRFToken': getCSRFToken()\n          },\n          body: formData\n        })\n          .then(res => res.json())\n          .then(data => {\n            if (data.status === 'success') {\n              showNotification({\n                type: 'success',\n                message: \"City added successfully!\"\n              });\n              onCityAdded(data.city);\n              setCityName('');\n            } else {\n              showNotification({\n                type: 'danger',\n                message: `City '${trimmedName}' already exists in the list!`\n              });\n            }\n          })\n          .catch(err => {\n            console.error('Error adding city:', err);\n            showNotification({\n              type: 'danger',\n              message: `Error adding city '${trimmedName}'`\n            });\n          });\n      })\n      .catch(err => {\n        console.error(\"City validation failed:\", err);\n        showNotification({\n          type: 'danger',\n          message: `City '${trimmedName}' does not exist in the world!`\n        });\n      });\n  };\n\n  return (\n    <div>\n      <form id=\"addCityForm\" onSubmit={handleSubmit}>\n        <div className=\"field has-addons\">\n          <div className=\"control is-expanded\">\n            <input\n              className=\"input\"\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"City Name\"\n              required\n              value={cityName}\n              onChange={e => setCityName(e.target.value)}\n            />\n          </div>\n          <div className=\"control\">\n            <button className=\"button is-info\" type=\"submit\">\n              Add City\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default AddCityForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}