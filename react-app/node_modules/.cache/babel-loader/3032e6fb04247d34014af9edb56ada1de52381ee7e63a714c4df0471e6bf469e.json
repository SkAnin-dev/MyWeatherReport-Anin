{"ast":null,"code":"var _jsxFileName = \"/user/HS400/sa03742/MyWeatherReport/react-app/src/components/AddCityForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { AJAX } from '../constant';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddCityForm = ({\n  cities,\n  onCityAdded,\n  showNotification\n}) => {\n  _s();\n  const [cityName, setCityName] = useState('');\n\n  // Helper: Get CSRF token from cookies.\n  const getCSRFToken = () => {\n    const match = document.cookie.match(new RegExp('(^| )csrftoken=([^;]+)'));\n    return match ? match[2] : '';\n  };\n\n  // Validate city using Visual Crossing API.\n  // We consider the city valid if the API response includes a non-empty \"resolvedAddress\".\n  const validateCity = name => {\n    const apikey = 'BP8GPRYV53UQ56SHJR5EFCJ77';\n    const apiUrl = `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${encodeURIComponent(name)}?unitGroup=metric&key=${apikey}&contentType=json`;\n    return fetch(apiUrl).then(response => {\n      if (!response.ok) throw new Error(\"Invalid city\");\n      return response.json();\n    }).then(data => {\n      console.log(\"Validation data for\", name, data);\n      if (data && data.resolvedAddress) {\n        return true;\n      } else {\n        throw new Error(\"Invalid city\");\n      }\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const formData = new FormData(form);\n    const trimmedName = formData.get('name').trim();\n    if (!trimmedName) return;\n\n    // Duplicate check.\n    if (cities.some(city => city.name.toLowerCase() === trimmedName.toLowerCase())) {\n      showNotification({\n        type: 'danger',\n        message: `City '${trimmedName}' already exists in the list!`\n      });\n      return;\n    }\n\n    // Validate the city.\n    validateCity(trimmedName).then(() => {\n      // When sending FormData, do not set the Content-Type header manually.\n      return fetch(`${AJAX}cities/add/`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'X-CSRFToken': getCSRFToken()\n        },\n        body: formData\n      });\n    }).then(res => res.json()).then(data => {\n      if (data.status === 'success') {\n        showNotification({\n          type: 'success',\n          message: \"City added successfully!\"\n        });\n        onCityAdded(data.city);\n        setCityName('');\n      } else {\n        showNotification({\n          type: 'danger',\n          message: `City '${trimmedName}' already exists in the list!`\n        });\n      }\n    }).catch(err => {\n      console.error('Validation or network error:', err);\n      showNotification({\n        type: 'danger',\n        message: `City '${trimmedName}' does not exist in the world!`\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"addCityForm\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field has-addons\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control is-expanded\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            name: \"name\",\n            type: \"text\",\n            placeholder: \"City Name\",\n            required: true,\n            value: cityName,\n            onChange: e => setCityName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button is-info\",\n            type: \"submit\",\n            children: \"Add City\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(AddCityForm, \"12wOx+cMTdbb2TTJ56KLWccy2IA=\");\n_c = AddCityForm;\nexport default AddCityForm;\nvar _c;\n$RefreshReg$(_c, \"AddCityForm\");","map":{"version":3,"names":["React","useState","AJAX","jsxDEV","_jsxDEV","AddCityForm","cities","onCityAdded","showNotification","_s","cityName","setCityName","getCSRFToken","match","document","cookie","RegExp","validateCity","name","apikey","apiUrl","encodeURIComponent","fetch","then","response","ok","Error","json","data","console","log","resolvedAddress","handleSubmit","e","preventDefault","form","target","formData","FormData","trimmedName","get","trim","some","city","toLowerCase","type","message","method","credentials","headers","body","res","status","catch","err","error","children","id","onSubmit","className","placeholder","required","value","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/user/HS400/sa03742/MyWeatherReport/react-app/src/components/AddCityForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { AJAX } from '../constant';\n\nconst AddCityForm = ({ cities, onCityAdded, showNotification }) => {\n  const [cityName, setCityName] = useState('');\n\n  // Helper: Get CSRF token from cookies.\n  const getCSRFToken = () => {\n    const match = document.cookie.match(new RegExp('(^| )csrftoken=([^;]+)'));\n    return match ? match[2] : '';\n  };\n\n  // Validate city using Visual Crossing API.\n  // We consider the city valid if the API response includes a non-empty \"resolvedAddress\".\n  const validateCity = (name) => {\n    const apikey = 'BP8GPRYV53UQ56SHJR5EFCJ77';\n    const apiUrl = `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${encodeURIComponent(name)}?unitGroup=metric&key=${apikey}&contentType=json`;\n    return fetch(apiUrl)\n      .then(response => {\n        if (!response.ok) throw new Error(\"Invalid city\");\n        return response.json();\n      })\n      .then(data => {\n        console.log(\"Validation data for\", name, data);\n        if (data && data.resolvedAddress) {\n          return true;\n        } else {\n          throw new Error(\"Invalid city\");\n        }\n      });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const form = e.target;\n    const formData = new FormData(form);\n    const trimmedName = formData.get('name').trim();\n    if (!trimmedName) return;\n\n    // Duplicate check.\n    if (cities.some(city => city.name.toLowerCase() === trimmedName.toLowerCase())) {\n      showNotification({ type: 'danger', message: `City '${trimmedName}' already exists in the list!` });\n      return;\n    }\n\n    // Validate the city.\n    validateCity(trimmedName)\n      .then(() => {\n        // When sending FormData, do not set the Content-Type header manually.\n        return fetch(`${AJAX}cities/add/`, {\n          method: 'POST',\n          credentials: 'include',\n          headers: {\n            'X-CSRFToken': getCSRFToken()\n          },\n          body: formData\n        });\n      })\n      .then(res => res.json())\n      .then(data => {\n        if (data.status === 'success') {\n          showNotification({ type: 'success', message: \"City added successfully!\" });\n          onCityAdded(data.city);\n          setCityName('');\n        } else {\n          showNotification({ type: 'danger', message: `City '${trimmedName}' already exists in the list!` });\n        }\n      })\n      .catch(err => {\n        console.error('Validation or network error:', err);\n        showNotification({ type: 'danger', message: `City '${trimmedName}' does not exist in the world!` });\n      });\n  };\n\n  return (\n    <div>\n      <form id=\"addCityForm\" onSubmit={handleSubmit}>\n        <div className=\"field has-addons\">\n          <div className=\"control is-expanded\">\n            <input\n              className=\"input\"\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"City Name\"\n              required\n              value={cityName}\n              onChange={e => setCityName(e.target.value)}\n            />\n          </div>\n          <div className=\"control\">\n            <button className=\"button is-info\" type=\"submit\">Add City</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default AddCityForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}